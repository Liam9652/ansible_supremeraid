---
- name: Query existing drive groups
  ansible.builtin.command: sudo graidctl ls dg --format=json
  become: true
  register: existing_dg_output
  changed_when: false

- name: Parse existing drive groups
  ansible.builtin.set_fact:
    existing_dg_list: "{{ (existing_dg_output.stdout | from_json).Result | map(attribute='DgId') | list }}"

- name: Check if new physical drives are available
  ansible.builtin.fail:
    msg: "No new physical drives found for creating drive groups."
  when: >
    (configure_pd.create_by_numa and not pd_list_by_numa) or
    (configure_pd.create_by_socket | int > 0 and not pd_list_by_socket) or
    (not configure_pd.create_by_numa and configure_pd.create_by_socket | int == 0 and not pd_list_all)

# - name: Debug - Show detailed condition evaluation
#   ansible.builtin.debug:
#     msg:
#       - "configure_pd.create_by_numa: {{ configure_pd.create_by_numa }}"
#       - "configure_pd.create_by_numa (as bool): {{ configure_pd.create_by_numa | bool }}"
#       - "configure_pd.create_by_socket: {{ configure_pd.create_by_socket }}"
#       - "configure_pd.create_by_socket (as int): {{ configure_pd.create_by_socket | default('-1') | int }}"
#       - "Condition 1 result: {{ configure_pd.create_by_numa | bool }}"
#       - "Condition 2 result: {{ configure_pd.create_by_socket | default('-1') | int < 0 }}"
#       - "Overall condition result: {{ (configure_pd.create_by_numa | bool) and (configure_pd.create_by_socket | default('-1') | int < 0) }}"

# - name: Debug - Check condition
#   ansible.builtin.debug:
#     msg: "Condition met for creating drive groups by NUMA"
#   when:
#     - configure_pd.create_by_numa | bool
#     - configure_pd.create_by_socket | default('-1') | int < 0

# - name: Debug pd_list_by_numa
#   debug:
#     msg:
#       - "{{ pd_list_by_numa }}"
#       - "configure_raid.type: {{ configure_raid.type }}"
#       - "configure_disk_group.dg_foreground_init: {{ configure_disk_group.dg_foreground_init }}"
#       - "configure_pd.create_by_numa: {{ configure_pd.create_by_numa }}"
#       - "configure_pd.create_by_socket: {{ configure_pd.create_by_socket }}"
#       - "pd_list_by_numa: {{ pd_list_by_numa }}"
#       - "pd_list_by_numa length: {{ pd_list_by_numa | length }}"
#       # - "Last element: {{ pd_list_by_numa | last }}"
#       # - "Slice result: {{ pd_list_by_numa[:-1] }}"

- name: Setup drive groups(NUMA)
  when:
    - configure_pd.create_by_numa | bool
    - configure_pd.create_by_socket == '' or
      configure_pd.create_by_socket | int < 0
  block:
    - name: Prepare drive groups list(NUMA)
      ansible.builtin.set_fact:
        drive_groups_numa: >
          {% set groups = [] %}
          {% for numa, drives in pd_list_by_numa.items() %}
            {% if configure_disk_group.pd_hotspare and drives | length > 1 %}
              {% set _ = groups.append(drives[:-1] | join(',')) %}
            {% else %}
              {% set _ = groups.append(drives | join(',')) %}
            {% endif %}
          {% endfor %}
          {{ groups | to_json }}

    - name: Ensure drive_groups_numa is a list
      ansible.builtin.set_fact:
        drive_groups_numa: "{{ drive_groups_numa | from_json }}"

    # - name: Debug drive_groups_numa
    #   debug:
    #     msg:
    #       - "drive_groups_numa: {{ drive_groups_numa }}"
    #       - "drive_groups_numa type: {{ drive_groups_numa | type_debug }}"
    #       - "drive_groups_numa length: {{ drive_groups_numa | length }}"

    - name: Create drive groups by NUMA
      become: true
      ansible.builtin.command: >
        graidctl create dg {{ configure_raid.type }} {{ item }}
        {% if configure_disk_group.dg_foreground_init %} -z{% endif %}
      loop: "{{ drive_groups_numa }}"
      register: create_dg_numa_results
      changed_when: false

- name: Create drive groups by Socket
  become: true
  ansible.builtin.command: >
    graidctl create dg {{ configure_raid.type }} {{ item.value | join(',') }}
    {% if configure_disk_group.dg_foreground_init %} -z{% endif %}
  loop: >
    {% if configure_disk_group.pd_hotspare %}
      {{ pd_list_by_socket | dict2items | map(attribute='value') | map('slice', 0, pd_list_by_socket | dict2items | length - 1) | list }}
    {% else %}
      {{ pd_list_by_socket | dict2items }}
    {% endif %}
  when:
    - configure_pd.create_by_socket | int > 0
    - not configure_pd.create_by_numa | bool
  register: create_dg_socket_results
  changed_when: false

- name: Create single drive group
  become: true
  ansible.builtin.command: >
    {% if configure_disk_group.pd_hotspare %}
      graidctl create dg {{ configure_raid.type }} {{ pd_list_all[:-1] | join(',') }}
      {% if configure_raid.dg_foreground_init %} -z{% endif %}
    {% else %}
      graidctl create dg {{ configure_raid.type }} {{ pd_list_all | join(',') }}
      {% if configure_raid.dg_foreground_init %} -z{% endif %}
    {% endif %}
  when: not configure_pd.create_by_numa and configure_pd.create_by_socket | int == 0
  register: create_dg_single_result
  changed_when: false

- name: Setup hotspare
  when: configure_disk_group.pd_hotspare
  block:
    - name: Setup hot spare for each NUMA node if configured
      become: true
      ansible.builtin.command: >
        graidctl e pd {{ item.value | last }} hotspare global
      loop: "{{ pd_list_by_numa | dict2items }}"
      when:
        - configure_pd.create_by_numa | bool
        - configure_pd.create_by_socket == '' or configure_pd.create_by_socket | int < 0
        - configure_disk_group.pd_hotspare | bool
        - item.value | length > 1
      register: setup_hotspare_result
      changed_when: false

    - name: Setup hot spare if configured for socket
      become: true
      ansible.builtin.command: >
        graidctl e pd {{ pd_list_by_socket | dict2items | last | first }} hotspare global
      when:
        - configure_pd.create_by_socket | int > 0
        - not configure_pd.create_by_numa | bool
      register: setup_hotspare_socket_result
      changed_when: false

    - name: Setup hot spare for single drive group
      become: true
      ansible.builtin.command: >
        graidctl e pd {{ pd_list_all | last }} hotspare global
      when:
        - not configure_pd.create_by_numa and configure_pd.create_by_socket | int == 0
      register: setup_hotspare_single_result
      changed_when: false

- name: Query new drive groups
  become: true
  ansible.builtin.command: graidctl ls dg --format=json
  register: new_dg_output
  changed_when: false

- name: Parse new drive groups and find newly added DgIds
  ansible.builtin.set_fact:
    new_dg_list: "{{ (new_dg_output.stdout | from_json).Result | map(attribute='DgId') | list }}"
    newly_added_dg_list: "{{ (new_dg_output.stdout | from_json).Result | map(attribute='DgId') | list | difference(existing_dg_list) }}"

# - name: Debug - Check condition
#   ansible.builtin.debug:
#     var:
#       - { { new_dg_list } }
#       - { { newly_added_dg_list } }

- name: Verify new drive groups were created
  ansible.builtin.fail:
    msg: "Failed to create any new drive groups."
  when: newly_added_dg_list | length == 0
  changed_when: false

- name: Wait for drive groups to initialize
  become: true
  ansible.builtin.command: graidctl ls dg --format=json
  register: dg_status_output
  until: (dg_status_output.stdout | from_json).Result | selectattr('DgId', 'in', newly_added_dg_list) | map(attribute='State') | list | unique == ['OPTIMAL']
  retries: 1000000
  delay: 60
  when: configure_raid.dg_foreground_init | bool
  changed_when: false

- name: Debug output of newly created drive groups
  ansible.builtin.debug:
    msg: "Newly created drive groups: {{ newly_added_dg_list }}"
