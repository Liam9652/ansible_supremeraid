---
- name: Set default values for variables
  ansible.builtin.set_fact:
    configure_raid_type: "{{ configure_raid_type | default('raid5') }}"
    configure_device_model_name: "{{ configure_device_model_name | default('QEMU NVMe Ctrl') }}"
    configure_device_count: "{{ configure_device_count | default('') }}"
    configure_vd_size: "{{ configure_vd_size | default('') }}"
    configure_create_by_numa: "{{ configure_create_by_numa | default(false) }}"
    configure_create_by_socket: "{{ configure_create_by_socket | default('') }}"
    configure_dg_foreground_init: "{{ configure_dg_foreground_init | default(false) }}"
    configure_vd_counts: "{{ configure_vd_counts | default(1) | int }}"

- name: Prompt user for drives device creation method
  ansible.builtin.pause:
    prompt: |
      How would you like to create PDs for NVMe devices?
      1. By model name (you will be prompted to enter the model name)
      2. Use value from vars/main.yml ({{ configure_device_model_name }})
      3. All devices
      Enter your choice (1, 2, or 3):
  register: user_choice
  run_once: true

# - name: Set selected model
#   ansible.builtin.set_fact:
#     selected_model: >-
#       {% if model_input.user_input == 1 %}
#         {{ model_input.user_input | trim }}
#       {% elif model_input.user_input == 2 %}
#         {{ configure_device_model_name }}
#       {% elif model_input.user_input == 3 %}
#         {{ model_input.user_input | default('') | trim }}
#       {% else %}
#         {{ configure_device_model_name }}
#       {% endif %}

# - name: Display selected model
#   ansible.builtin.debug:
#     var: selected_model

# - name: Filter devices based on selected model and creation method
#   ansible.builtin.set_fact:
#     filtered_devices: >-
#       {% if creation_method == 3 %}
#         {{ all_devices }}
#       {% elif creation_method == 2 %}
#         {{ all_devices | selectattr('Model', 'equalto', configure_device_model_name) | list }}
#       {% else %}
#         {{ all_devices | selectattr('Model', 'equalto', selected_model) | list }}
#       {% endif %}

- name: Set creation method based on user input or default
  ansible.builtin.set_fact:
    creation_method: >-
      {% if user_choice.user_input | trim == '1' %}
        {{ user_choice.user_input | trim }}
      {% elif user_choice.user_input | trim == '2' or user_choice.user_input | trim == '' %}
        {{ configure_device_model_name }}
      {% elif user_choice.user_input | trim == '3' %}
        {{ user_choice.user_input  | trim }}
      {% else %}
        {{ configure_device_model_name }}
      {% endif %}

- name: Query NVMe devices
  ansible.builtin.command: graidctl ls nd --format json
  register: nvme_devices_output
  ignore_errors: true
  become: true
  changed_when: false

- name: Query SCSI devices
  ansible.builtin.command: graidctl ls sd --format json
  register: scsi_devices_output
  ignore_errors: true
  become: true
  changed_when: false

- name: Parse device data and display models
  ansible.builtin.set_fact:
    nvme_devices: "{{ (nvme_devices_output.stdout | from_json).Result }}"
    scsi_devices: "{{ (scsi_devices_output.stdout | from_json).Result }}"
    all_devices: "{{ {'NVMe': (nvme_devices_output.stdout | from_json).Result, 'SCSI': (scsi_devices_output.stdout | from_json).Result} }}"
    nvme_models: "{{ (nvme_devices_output.stdout | from_json).Result | map(attribute='Model') | unique | list }}"
    scsi_models: "{{ (scsi_devices_output.stdout | from_json).Result | map(attribute='Model') | unique | list }}"

- name: Display all available models
  ansible.builtin.debug:
    msg: "All available models:\n NVMe: [{{ nvme_models | join(', ') }}],\n SCSI: [{{ scsi_models | join(', ') }}]"

- name: Prompt for model name if by_model_input
  ansible.builtin.pause:
    prompt: "Enter the model name of devices you want to create PDs for:"
  register: model_input
  when: creation_method | int == 1
  run_once: true

- name: Display selected model
  ansible.builtin.debug:
    var: model_input

- name: Filter devices based on selected model
  ansible.builtin.set_fact:
    filtered_devices: >-
      {% if user_choice.user_input | int == 3 %}
        {{ all_devices }}
      {% else %}
        {% set filtered = {} %}
        {% for device_type, devices in all_devices.items() %}
          {% set filtered_type = devices | selectattr('Model', 'equalto', model_input.user_input) | list %}
          {% if filtered_type %}
            {% set _ = filtered.update({device_type: filtered_type}) %}
          {% endif %}
        {% endfor %}
        {{ filtered }}
      {% endif %}

# - name: Display filtered devices
#   ansible.builtin.set_fact:
#     selected_devices: filtered_devices

# - name: Extract devices based on selection
#   ansible.builtin.set_fact:
#     selected_devices: >-
#       {% if selected_model == 'all' %}
#         {{ (filtered_devices.NVMe | default([])) + (filtered_devices.SCSI | default([])) }}
#       {% elif 'NVMe' in filtered_devices and filtered_devices.NVMe | selectattr('Model', 'equalto', selected_model) | list | length > 0 %}
#         {{ filtered_devices.NVMe | selectattr('Model', 'equalto', selected_model) | list }}
#       {% elif 'SCSI' in filtered_devices and filtered_devices.SCSI | selectattr('Model', 'equalto', selected_model) | list | length > 0 %}
#         {{ filtered_devices.SCSI | selectattr('Model', 'equalto', selected_model) | list }}
#       {% else %}
#         []
#       {% endif %}

- name: Display filtered devices
  ansible.builtin.debug:
    var: filtered_devices

- name: Parse filtered devices string
  ansible.builtin.set_fact:
    parsed_filtered_devices: "{{ filtered_devices | regex_replace('^\\s+', '') | regex_replace('\\s+$', '') | regex_replace('\\n', '') | from_yaml }}"

- name: Display parsed filtered devices
  ansible.builtin.debug:
    var: parsed_filtered_devices

- name: Combine NVMe and SCSI devices
  ansible.builtin.set_fact:
    combined_devices: "{{ parsed_filtered_devices.NVMe | default([]) + parsed_filtered_devices.SCSI | default([]) }}"

- name: Display combined devices
  ansible.builtin.debug:
    var: combined_devices

- name: Get LED configuration
  ansible.builtin.command: graidctl desc conf led --format json
  register: led_config_output
  changed_when: false
  failed_when: false

- name: Parse LED configuration
  ansible.builtin.set_fact:
    led_config: "{{ led_config_output.stdout | from_json }}"
  when: led_config_output.rc == 0

- name: Get physical slot for each device
  ansible.builtin.command: "lspci -s {{ item.Address }} -nnvvv -d ::0108 -D -PP"
  loop: "{{ combined_devices }}"
  register: physical_slot_output
  changed_when: false
  failed_when: false
  become: true
  when:
    - combined_devices | length > 0
    - scsi_devices is not defined or scsi_devices | length == 0

- name: Display raw physical slot output
  ansible.builtin.debug:
    var: physical_slot_output
  when: physical_slot_output is defined

- name: Parse physical slot information
  ansible.builtin.set_fact:
    physical_slots: >-
      {% set result = {} %}
      {% for item in physical_slot_output.results %}
        {% if item.stdout is defined %}
          {% set slot_match = item.stdout | regex_search('Physical Slot:\s*([^\n]*)', '\\1') %}
          {% if slot_match %}
            {% set _ = result.update({item.item.Address: slot_match[0] | default('')}) %}
          {% else %}
            {% set _ = result.update({item.item.Address: 'N/A'}) %}
          {% endif %}
        {% endif %}
      {% endfor %}
      {{ result }}
  when:
    - physical_slot_output is defined
    - physical_slot_output.results is defined
    - physical_slot_output.results | length > 0

- name: Clean and convert physical_slots to JSON
  ansible.builtin.set_fact:
    physical_slots_json: "{{ physical_slots | regex_replace('^\\s+|\\s+$', '') | from_yaml | to_json }}"

- name: Convert led_config to JSON
  ansible.builtin.set_fact:
    led_config_json: "{{ led_config | to_json }}"

- name: Display converted parameters
  ansible.builtin.debug:
    msg:
      - "physical_slots_json type: {{ physical_slots_json | type_debug }}"
      - "physical_slots_json: {{ physical_slots_json }}"
      - "led_config_json type: {{ led_config_json | type_debug }}"
      - "led_config_json: {{ led_config_json }}"

- name: Sort devices
  ansible.builtin.set_fact:
    sorted_devices: >-
      {% if combined_devices | length > 0 %}
        {% if configure_create_by_numa | bool %}
          {{ combined_devices | sort_devices('Numa', create_by_numa=true, led_config=led_config_json, physical_slots=physical_slots_json) }}
        {% elif configure_pd_sorting == 'Address' %}
          {{ combined_devices | sort_devices('Address', led_config=led_config_json, physical_slots=physical_slots_json) }}
        {% elif configure_pd_sorting == 'DevPath' %}
          {{ combined_devices | sort_devices('DevPath', led_config=led_config_json, physical_slots=physical_slots_json) }}
        {% elif configure_pd_sorting == 'NQN' %}
          {{ combined_devices | sort_devices('NQN', led_config=led_config_json, physical_slots=physical_slots_json) }}
        {% else %}
          {{ combined_devices | sort_devices(configure_pd_sorting, led_config=led_config_json, physical_slots=physical_slots_json) }}
        {% endif %}
      {% else %}
        []
      {% endif %}

- name: Clean and parse sorted devices
  ansible.builtin.set_fact:
    cleaned_devices: "{{ sorted_devices | regex_replace('^\\s+|\\s+$', '') | regex_replace('\\n', '') }}"

- name: Display cleaned_devices
  ansible.builtin.debug:
    var: cleaned_devices

- name: Extract NQN or WWID values
  ansible.builtin.set_fact:
    nqn_list: "{{ lookup('template', 'nqn_list.j2')  }}"

- name: Display NQN list
  ansible.builtin.debug:
    var: nqn_list

- name: Display configure_pd_create_attribute
  ansible.builtin.debug:
    var: configure_pd_create_attribute

- name: Validate configurations
  ansible.builtin.include_tasks: validate_configs.yml

- name: Save prepared devices to file
  ansible.builtin.copy:
    content: "{{ nqn_list | to_nice_json }}"
    dest: "/tmp/prepared_devices.json"
    mode: "0755"
  become: true

- name: Display saved content
  ansible.builtin.debug:
    msg: "Content saved to /tmp/prepared_devices.json: {{ nqn_list | to_nice_json }}"
