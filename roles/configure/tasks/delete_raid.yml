---
# roles/configure/tasks/delete_raid_config.yml

- name: Gather information about RAID configuration
  block:
    - name: Check the amounts of VDs created
      become: true
      ansible.builtin.command: "graidctl ls vd --format=json"
      register: graidctl_ls_vd_output
      changed_when: false

    - name: Check the amount of DGs created
      become: true
      ansible.builtin.command: "graidctl ls dg --format=json"
      register: graidctl_ls_dg_output
      changed_when: false

    - name: Check the amount of PDs created
      become: true
      ansible.builtin.command: "graidctl ls pd --format=json"
      register: graidctl_ls_pd_output
      changed_when: false

    - name: Parse VD, DG, and PD output
      ansible.builtin.set_fact:
        vd_list: "{{ graidctl_ls_vd_output.stdout | from_json }}"
        dg_list: "{{ graidctl_ls_dg_output.stdout | from_json }}"
        pd_list: "{{ graidctl_ls_pd_output.stdout | from_json }}"

    - name: Get ZFS pool list
      ansible.builtin.command: "zpool list -H -o name"
      register: zpool_list
      changed_when: false
      become: true
      failed_when: false

    - name: Get ZFS pool status for each pool
      ansible.builtin.command: "zpool status -P {{ item }}"
      loop: "{{ zpool_list.stdout_lines }}"
      register: zpool_status_results
      changed_when: false
      become: true
      failed_when: false

    - name: Identify ZFS pools using GRAID devices
      ansible.builtin.set_fact:
        zfs_pools_to_remove: "{{ zpool_status_results.results | selectattr('stdout', 'search', '/dev/gdg') | map(attribute='item') | list }}"

    - name: Check if VDs are mounted
      ansible.builtin.find:
        paths: /proc/mounts
        contains: "/dev/gdg"
      register: mount_output
      become: true

    - name: Check if VDs are used by LVM
      ansible.builtin.command: "lvs --noheadings -o lv_path,devices"
      register: lvs_output
      become: true
      changed_when: false
      failed_when: false

- name: Display configuration summary
  ansible.builtin.debug:
    msg:
      - "VDs to delete: {{ (vd_list.Result | default([])) | length }}"
      - "DGs to delete: {{ (dg_list.Result | default([])) | length }}"
      - "PDs to delete: {{ (pd_list.Result | default([])) | length }}"
      - "ZFS pools to remove: {{ zfs_pools_to_remove | default([]) | join(', ') }}"
      - "Mounted VDs: {{ mount_output.stdout_lines | default([]) }}"
      - "LVM VDs: {{ lvs_output.stdout_lines | default([]) | select('search', '/dev/gdg') | list }}"

- name: Confirm RAID configuration deletion
  ansible.builtin.pause:
    prompt: |
      You are about to delete the following RAID configuration:
      - {{ (vd_list.Result | default([])) | length }} VDs
      - {{ (dg_list.Result | default([])) | length }} DGs
      - {{ (pd_list.Result | default([])) | length }} PDs
      - ZFS pools: {{ zfs_pools_to_remove | default([]) | join(', ') }}
      This action cannot be undone. Are you sure you want to proceed? (yes/no)
  register: confirm_deletion
  when: not auto_confirm | default(false) | bool
  run_once: true
  # delegate_to: localhost

- name: Proceed with RAID configuration deletion
  when: auto_confirm | default(false) | bool or confirm_deletion.user_input | lower == 'yes'
  block:
    - name: Unmount all ZFS filesystems
      ansible.builtin.command: "zfs unmount -a"
      become: true
      register: zfs_unmount_result
      failed_when:
        - zfs_unmount_result.rc != 0
        - '"filesystem is busy" not in zfs_unmount_result.stderr'
        - '"no datasets available" not in zfs_unmount_result.stderr'
      changed_when: zfs_unmount_result.rc == 0

    - name: Export ZFS pools using Graid devices
      ansible.builtin.command: "zpool export {{ item }}"
      loop: "{{ zfs_pools_to_remove }}"
      become: true
      register: zpool_export_result
      failed_when:
        - zpool_export_result.rc != 0
        - '"no such pool" not in zpool_export_result.stderr'
        - '"pool is busy" not in zpool_export_result.stderr'
      changed_when:
        - zpool_export_result.rc == 0
      loop_control:
        label: "{{ item }}"

    - name: Destroy ZFS pools using GRAID devices
      ansible.builtin.command: "zpool destroy {{ item }}"
      loop: "{{ zfs_pools_to_remove }}"
      become: true
      register: zpool_destroy_result
      failed_when:
        - zpool_destroy_result.rc != 0
        - '"no such pool" not in zpool_destroy_result.stderr'
        - '"pool is busy" not in zpool_destroy_result.stderr'
      changed_when:
        - zpool_destroy_result.rc == 0
      loop_control:
        label: "{{ item }}"

    - name: Display mount output for debugging
      ansible.builtin.debug:
        var: mount_output

    - name: Unmount VDs
      ansible.builtin.command: "umount {{ item.split()[2] }}"
      loop: "{{ mount_output.stdout_lines | default([]) }}"
      when: "'/dev/gdg' in item"
      become: true
      register: unmount_result
      failed_when:
        - unmount_result.rc != 0
        - '"not mounted" not in unmount_result.stderr'
        - '"target is busy" not in unmount_result.stderr'
      changed_when:
        - unmount_result.rc == 0
      loop_control:
        label: "{{ item.split()[2] }}"

    - name: Remove LVM logical volumes using VDs
      ansible.builtin.command: "lvremove -f {{ item.split()[0] }}"
      loop: "{{ lvs_output.stdout_lines | default([]) }}"
      when: "'/dev/gdg' in item"
      become: true
      register: lvremove_result
      failed_when:
        - lvremove_result.rc != 0
        - '"Logical volume not found" not in lvremove_result.stderr'
      changed_when:
        - lvremove_result.rc == 0
        - '"Logical volume not found" not in lvremove_result.stderr'
      loop_control:
        label: "{{ item.split()[0] }}"

    - name: Unexport VDs
      ansible.builtin.command: "graidctl unexport vd {{ item.DgId }} {{ item.VdId }} -a"
      loop: "{{ vd_list.Result }}"
      when: item.Exported
      become: true
      register: unexport_result
      failed_when:
        - unexport_result.rc != 0
        - '"not found" not in unexport_result.stderr'
        - '"not exported" not in unexport_result.stderr'
      changed_when:
        - unexport_result.rc == 0
        - '"not exported" not in unexport_result.stdout'
      loop_control:
        label: "DG{{ item.DgId }}_VD{{ item.VdId }}"

    - name: Delete VDs
      become: true
      ansible.builtin.command: "graidctl del vd {{ item.DgId }} {{ item.VdId }} --confirm-to-delete"
      loop: "{{ vd_list.Result | list }}"
      register: delete_vd_results
      changed_when: false

    - name: Display VD deletion errors
      ansible.builtin.debug:
        msg: "Failed to delete VD {{ item.item.DevPath }}: {{ item.stderr }}"
      loop: "{{ delete_vd_results.results }}"
      when: item.failed

    - name: Delete DGs
      become: true
      ansible.builtin.command: "graidctl del dg {{ item.DgId }} --confirm-to-delete"
      loop: "{{ dg_list.Result | list }}"
      when: dg_list.Result is defined
      changed_when: false

    - name: Delete PDs
      become: true
      ansible.builtin.command: "graidctl del pd {{ item.PdId }}"
      loop: "{{ pd_list.Result | list }}"
      when: pd_list.Result is defined
      changed_when: false

- name: Display completion message
  ansible.builtin.debug:
    msg: >-
      RAID configuration deletion
      {% if auto_confirm | default(false) | bool or confirm_deletion.user_input | lower == 'yes' %}
      completed
      {% else %}
      was cancelled
      {% endif %}.
