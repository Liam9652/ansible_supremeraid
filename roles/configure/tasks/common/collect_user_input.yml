---
- name: Set default values for variables
  ansible.builtin.set_fact:
    configure: "{{ configure | default({}) }}"
    general: "{{ general | default({}) }}"

- name: Set default values for nested variables
  ansible.builtin.set_fact:
    configure: >-
      {{
        configure | combine({
          'raid': configure_raid | default({}),
          'pd': configure_pd | default({}),
          'disk_group': configure_disk_group | default({})
        })
      }}

- name: Set specific default values
  ansible.builtin.set_fact:
    configure: >-
      {{
        configure | combine({
          'raid': configure_raid | combine({
            'type': configure_raid.type | default('raid5'),
            'vd_size': configure_raid.vd_size | default(''),
            'vd_counts': configure_raid.vd_counts | default(1) | int
          }),
          'pd': configure_pd | combine({
            'create_by_numa': configure_pd.create_by_numa | default(false),
            'create_by_socket': configure_pd.create_by_socket | default('')
          }),
          'disk_group': configure_disk_group | combine({
            'dg_foreground_init': configure_disk_group.dg_foreground_init | default(false)
          })
        })
      }}
    general: >-
      {{
        general | combine({
          'device_model_name': general.device_model_name | default('QEMU NVMe Ctrl')
        })
      }}

- name: Query NVMe devices
  ansible.builtin.command: graidctl ls nd --format json
  register: nvme_devices_output
  ignore_errors: true
  become: true
  changed_when: false

- name: Query SCSI devices
  ansible.builtin.command: graidctl ls sd --format json
  register: scsi_devices_output
  ignore_errors: true
  become: true
  changed_when: false

- name: Parse device data and display models
  ansible.builtin.set_fact:
    nvme_devices: "{{ (nvme_devices_output.stdout | from_json).Result }}"
    scsi_devices: "{{ (scsi_devices_output.stdout | from_json).Result }}"
    all_devices: "{{ {'NVMe': (nvme_devices_output.stdout | from_json).Result, 'SCSI': (scsi_devices_output.stdout | from_json).Result} }}"
    nvme_models: "{{ (nvme_devices_output.stdout | from_json).Result | map(attribute='Model') | unique | list }}"
    scsi_models: "{{ (scsi_devices_output.stdout | from_json).Result | map(attribute='Model') | unique | list }}"

- name: Gather all models from all hosts
  ansible.builtin.set_fact:
    all_nvme_models: "{{ all_nvme_models | default([]) + nvme_models }}"
    all_scsi_models: "{{ all_scsi_models | default([]) + scsi_models }}"
  run_once: true
  delegate_to: localhost

- name: Display all available models
  ansible.builtin.debug:
    msg:
      - "All available NVMe models across all hosts: {{ all_nvme_models | unique | join(', ') }}"
      - "All available SCSI models across all hosts: {{ all_scsi_models | unique | join(', ') }}"
  run_once: true

- name: Prompt user for drives device creation method
  ansible.builtin.pause:
    prompt: |
      How would you like to create PDs for devices?
      1. By model name (you will be prompted to enter the model name)
      2. Use value from vars/main.yml ({{ general.device_model_name }})
      3. All devices
      4. Custom selection for each host
      Enter your choice (1, 2, 3, or 4):
  register: user_choice
  run_once: true
  delegate_to: localhost

- name: Set creation method based on user input
  ansible.builtin.set_fact:
    creation_method: "{{ user_choice.user_input | default('2') | trim }}"
  run_once: true
  delegate_to: localhost

- name: Set creation method globally
  ansible.builtin.set_fact:
    creation_method: "{{ hostvars['localhost']['creation_method'] }}"

- name: Prompt for model name if by_model_input
  ansible.builtin.pause:
    prompt: >-
      Enter the model name of devices you want to create PDs for.
      ({{ all_nvme_models | unique | length }} NVMe models,
      {{ all_scsi_models | unique | length }} SCSI models available):
  register: model_input
  when: creation_method == '1'
  run_once: true
  delegate_to: localhost

- name: Set device model name
  ansible.builtin.set_fact:
    device_model_name: >-
      {% if creation_method == '1' %}
        {{ model_input.user_input | default('') | trim }}
      {% elif creation_method == '2' %}
        {{ general.device_model_name }}
      {% elif creation_method == '3' %}
        all
      {% else %}
        custom
      {% endif %}
  run_once: true
  delegate_to: localhost

- name: Set device model name globally
  ansible.builtin.set_fact:
    device_model_name: "{{ hostvars['localhost']['device_model_name'] }}"

- name: Custom selection for each host
  when: creation_method == '4'
  block:
    - name: Prompt for custom selection
      ansible.builtin.pause:
        prompt: >-
          Enter the model names or 'all' for host {{ inventory_hostname }}
          (available NVMe models: {{ nvme_models | join(', ') }},
          available SCSI models: {{ scsi_models | join(', ') }}):
      register: host_custom_input

    - name: Set custom device selection for host
      ansible.builtin.set_fact:
        host_device_selection: "{{ host_custom_input.user_input | default('all') | trim }}"

- name: Debug variables
  ansible.builtin.debug:
    msg:
      - "Host: {{ inventory_hostname }}"
      - "creation_method: {{ creation_method | default('undefined') }}"
      - "device_model_name: {{ device_model_name | default('undefined') }}"
      - "host_device_selection: {{ host_device_selection | default('undefined') }}"
      - "configure: {{ configure | to_nice_yaml }}"

- name: Share user input across all hosts
  ansible.builtin.set_fact:
    shared_creation_method: "{{ creation_method }}"
    shared_device_model_name: "{{ device_model_name }}"
    host_specific_selection: "{{ host_device_selection | default(omit) }}"
