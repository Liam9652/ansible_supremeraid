---
# tasks file for copy_files
- name: Debug linux installer URLs
  debug:
    msg:
      - "NV URL: {{ linux.nv_url }}"
      - "Pre-installer URL: {{ linux.pre_installer_url }}"
      - "Installer URLs: {{ linux.installer_urls }}"

- name: Ensure local download directory exists
  delegate_to: localhost
  become: false
  ansible.builtin.file:
    path: "{{ setup.graid_path }}"
    state: directory
    mode: "0755"

- name: Check if installers exist on control node
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ setup.graid_path }}{{ item | basename }}"
  with_flattened:
    - "{{ linux.nv_url }}"
    - "{{ linux.pre_installer_url }}"
    - "{{ linux.installer_urls }}"
  register: install_package_stats

- name: Debug installer stats
  debug:
    var: install_package_stats

- name: Start download packages
  delegate_to: localhost
  become: false
  ansible.builtin.get_url:
    url: "{{ item.item }}"
    dest: "{{ setup.graid_path }}{{ item.item | basename }}"
    mode: "0755"
  async: 3600
  poll: 0
  loop: "{{ install_package_stats.results }}"
  when:
    - ansible_os_family != "Windows"
    - not item.stat.exists
  register: download_jobs

- name: Wait for downloads to complete
  delegate_to: localhost
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 360
  delay: 10
  loop: "{{ download_jobs.results | selectattr('ansible_job_id', 'defined') | list }}"
  when: download_jobs.changed

- name: Show download completion message
  debug:
    msg: "All downloads have completed."

- name: Copy installers to remote host
  become: true
  ansible.builtin.copy:
    src: "{{ setup.graid_path }}{{ item.item | basename }}"
    dest: "{{ setup.graid_path }}{{ item.item | basename }}"
    mode: "0755"
  loop: "{{ install_package_stats.results }}"
  when:
    - ansible_os_family != "Windows"
    - item.stat.exists or (item.item in download_results.results | map(attribute='dest') | list)

- name: Download nv dirver to control node
  become: false
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ windows.nv_url }}"
    dest: "{{ setup.graid_path }}{{ windows.nv_url | basename }}"
    mode: "0755"
  when:
    - ansible_os_family == "Windows"

- name: Download Installation script to control node
  become: false
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ windows.installation_script_url }}"
    dest: "{{ setup.graid_path }}{{ windows.installation_script_url | basename }}"
    mode: "0755"
  when:
    - ansible_os_family == "Windows"

- name: Download installers to control node
  become: false
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ item.item }}"
    dest: "{{ setup.graid_path }}{{ item.item | basename }}"
    mode: "0755"
  loop: "{{ windows.installer_win_urls }}"
  when:
    - ansible_os_family == "Windows"

- name: Copy nv dirver to remote host
  become: true
  ansible.windows.win_copy:
    src: "{{ setup.graid_path }}{{ windows.nv_url | basename }}"
    dest: "C:\\Temp\\{{ windows.nv_url | basename }}"
  when:
    - ansible_os_family == "Windows"

- name: Copy Installation script to remote host
  become: true
  ansible.windows.win_copy:
    src: "{{ setup.graid_path }}{{ windows.installation_script_url | basename }}"
    dest: "C:\\Temp\\{{ windows.installation_script_url | basename }}"
  when:
    - ansible_os_family == "Windows"

- name: Copy installers to remote host
  become: true
  ansible.windows.win_copy:
    src: "{{ setup.graid_path }}{{ item | basename }}"
    dest: "C:\\Temp\\{{ item | basename }}"
  loop: "{{ windows.installer_win_urls }}"
  when:
    - ansible_os_family == "Windows"
